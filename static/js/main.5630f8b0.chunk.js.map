{"version":3,"sources":["components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputData","setInputData","list","localStorage","getItem","console","log","JSON","parse","getdatafromlocalstorage","items","setItems","addoredit","setAddoredit","edititemid","setEdititemid","addItem","allinputdata","id","Date","getTime","toString","name","map","ele","alert","useEffect","setItem","stringify","className","type","placeholder","value","onChange","e","target","onClick","element","index","edititem","find","edit","updateditems","filter","elem","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAkHeA,EAnGF,WACT,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAdE,WAC5B,IAAMG,EAAOC,aAAaC,QAAQ,QAGlC,OAFAC,QAAQC,IAAI,OAAOJ,GAEhBA,EACQK,KAAKC,MAAON,GAEZ,GAOyBO,IAApC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAoCd,mBAAS,MAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KAIMC,EAAU,WACZ,GAAIhB,EAEE,GAAIY,EAcJ,CACF,IAAMK,EAAe,CAACC,IAAK,IAAIC,MAAOC,UAAUC,WAAaC,KAAMtB,GACnEW,EAAQ,sBAAOD,GAAP,CAAcO,KACtBhB,EAAa,SAhBbU,EACID,EAAMa,KAAK,SAACC,GACR,OAAIA,EAAIN,KAAOJ,EACJ,2BAAKU,GAAZ,IAAiBF,KAAKtB,IAEnBwB,MAIdX,GAAa,GACbZ,EAAa,IACbc,EAAc,WAbfU,MAAM,qBAkDd,OALAC,qBAAU,WACNvB,aAAawB,QAAQ,OAAOpB,KAAKqB,UAAWlB,MAC7C,CAACA,IAIA,qCAEI,kDACA,sBAAKmB,UAAU,WAAf,UACI,uBAAOC,KAAK,OAAOD,UAAU,QAAQE,YAAY,aAC7CC,MAAOhC,EACPiC,SAAU,SAACC,GAASjC,EAAaiC,EAAEC,OAAOH,UAE3CpB,EAAY,sBAAOwB,QAASpB,EAAhB,mBAAyC,sBAAOoB,QAASpB,EAAhB,uBAG5D,qBAAKa,UAAU,WAAf,SAEYnB,EAAMa,KAAI,SAACc,GACP,OACI,mCACA,sBAAKR,UAAU,OAAf,UACI,6BAAKQ,EAAQf,OACb,sBACAO,UAAU,OACVO,QAAU,kBAtC7B,SAACE,GACV,IAAMC,EAAW7B,EAAM8B,MAAM,SAAChB,GAC1B,OAAOc,IAAUd,EAAIN,MAEzBb,QAAQC,IAAI,8BAA8BiC,GAC1C1B,GAAa,GACbZ,EAAasC,EAASjB,MACtBP,EAAcuB,GA+B6BG,CAAKJ,EAAQnB,KAF5B,uBAGA,sBACAW,UAAU,SACVO,QAAU,kBApDvB,SAACE,GAChB,IAAMI,EAAehC,EAAMiC,QAAO,SAACC,GAC/B,OAAON,IAAUM,EAAK1B,MAE1BP,EAAS+B,GAgDkCG,CAAWR,EAAQnB,KAFlC,sBALuBmB,EAAQnB,WAevD,qBAAKW,UAAU,WAAf,SACI,wBAAQC,KAAK,SAASD,UAAU,YAAYO,QAAS,WArD7DzB,EAAS,KAqDD,+BCjGDmC,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5630f8b0.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { IconName } from \"react-icons/fa\";\r\n\r\nconst getdatafromlocalstorage = ()=>{\r\n    const list = localStorage.getItem('list')\r\n    console.log(\"list\",list);\r\n\r\n    if(list){\r\n        return JSON.parse( list ) ;\r\n    }else{\r\n        return [];\r\n    }\r\n}\r\n\r\n\r\nconst Todo = () => {\r\n    const [inputData, setInputData] = useState('');\r\n    const [items, setItems] = useState( getdatafromlocalstorage() );\r\n    const [addoredit, setAddoredit] = useState(true);\r\n    const [edititemid, setEdititemid] = useState(null);\r\n\r\n\r\n\r\n    const addItem = () => {\r\n        if(!inputData){\r\n            alert(\"enter some value\");\r\n        }else if(!addoredit){\r\n            setItems( \r\n                items.map( (ele)=>{\r\n                    if( ele.id === edititemid ){\r\n                        return { ...ele, name:inputData }\r\n                    }\r\n                    return ele ;\r\n                })\r\n             )\r\n\r\n             setAddoredit(true);\r\n             setInputData('');\r\n             setEdititemid(null)\r\n\r\n        }else {\r\n            const allinputdata = {id : new Date().getTime().toString() , name :inputData}\r\n            setItems ([ ...items ,allinputdata]) ;\r\n            setInputData('') ;\r\n        }\r\n    }\r\n\r\n    const deleteItem = (index) => {\r\n        const updateditems = items.filter((elem) => {\r\n            return index !== elem.id ;\r\n        });\r\n        setItems(updateditems);\r\n    }\r\n\r\n    const deleteall = ( ) => {\r\n        setItems([]);\r\n    }\r\n\r\n    const edit = (index) => {\r\n        const edititem = items.find( (ele)=>{\r\n            return index === ele.id ;\r\n        } );\r\n        console.log(\" ..............edititem....\",edititem)\r\n        setAddoredit(false);\r\n        setInputData(edititem.name);\r\n        setEdititemid(index)\r\n\r\n    }\r\n\r\n// add local storage\r\n    useEffect(()=>{\r\n        localStorage.setItem('list',JSON.stringify( items ) )\r\n    }, [items] )\r\n\r\n\r\n    return (\r\n        <>\r\n       \r\n            <h1>Create todo list</h1>\r\n            <div className=\"inputdiv\">\r\n                <input type=\"text\" className=\"input\" placeholder=\"enter task\" \r\n                    value={inputData}\r\n                    onChange={(e) => {  setInputData(e.target.value)  }}\r\n                ></input>\r\n                {  addoredit ? <span  onClick={addItem} > Add </span> : <span  onClick={addItem} > edit </span>}\r\n               \r\n            </div>\r\n            <div className=\"tasklist\">\r\n                    {\r\n                        items.map((element)=>{\r\n                            return (\r\n                                <>\r\n                                <div className=\"task\" key={element.id} >\r\n                                    <h3>{element.name}</h3>\r\n                                    <span \r\n                                    className=\"edit\"\r\n                                    onClick={ ()=> edit(element.id) }  >  edit   </span>                                    \r\n                                    <span \r\n                                    className=\"delete\"\r\n                                    onClick={ ()=> deleteItem(element.id) }  >  x   </span>\r\n                                    \r\n                                </div>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n            </div>\r\n            <div className=\"clearall\">\r\n                <button type=\"button\" className=\"deleteall\" onClick={()=>{deleteall()}} > Delete all</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Todo from './components/Todo' ;\nfunction App() {\n  return (\n    <>\n      <Todo />\n    </>\n  );\n} \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}